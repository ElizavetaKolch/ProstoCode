1. Что такое объект в Javascript?
Объекты используются для хранения коллекций различных значений и более сложных сущностей.(не примитивный тип данных)
-------------------------------------------------------------------------------------------------------------------------------------


2. Как объект объявляется в JS?
Объект может быть создан с помощью фигурных скобок {…} с необязательным списком свойств. 
Свойство – это пара «ключ: значение», где ключ – это строка (также называемая «именем свойства»), а значение может быть чем угодно.
-------------------------------------------------------------------------------------------------------------------------------------


3. Как можно добавить/изменить/ удалить свойство объекта

const user = {
	age: 30,
	name: 'Vasilii',
	city: 'Moscow',
	
};


user.age = 40;
delete user.age;
user.email = 'Amit@example.com';
----------------------------------------------------------------------------------------------------------------------------------------------

4. Каким типом может быть значение свойства?
в свойстве могут храниться любые примитивные данные (строки, числа, булевы значения)
 и другие объекты (массивы в JavaScript – тоже имеют тип Object), функции
 ---------------------------------------------------------------------------------------------------------------------------------------------

5. Что такое метод? Чем он отличается от обычной функции?
метод - функция в объекте
 ---------------------------------------------------------------------------------------------------------------------------------------------




6. Как происходит сравнение объектов? Погуглить  посмотреть детальный разбор различных способов
Ссылочное равенство: Определяет, ссылаются ли два предоставленных операнда на одну и ту же ссылку/экземпляр объекта.
Глубокое равенство: Определяет, равны ли объекты, сравнивая каждое свойство в операндах.
   -Ручное сравнение
   const person1 = {
    "firstName": "John",
    "lastName": "Doe",
    "age": 35
};

const person2 = {
    "firstName": "John",
    "lastName": "Doe",
    "age": 35,
};

const isDeepEqual = (object1, object2) => {

  const objKeys1 = Object.keys(object1);
  const objKeys2 = Object.keys(object2);

  if (objKeys1.length !== objKeys2.length) return false;

  for (var key of objKeys1) {
    const value1 = object1[key];
    const value2 = object2[key];

    const isObjects = isObject(value1) && isObject(value2);

    if ((isObjects && !isDeepEqual(value1, value2)) ||
      (!isObjects && value1 !== value2)
    ) {
      return false;
    }
  }
  return true;
};

const isObject = (object) => {
  return object != null && typeof object === "object";
};

console.log(isDeepEqual(person1, person2)); //true
   -Метод JSON.stringify()
   onst person1 = {
    "firstName": "John",
    "lastName": "Doe",
    "age": 35
}

const person2 = {
    "firstName": "John",
    "lastName": "Doe",
    "age": 35
}

JSON.stringify(person1) === JSON.stringify(person2); // true
   -Сравнения с помощью библиотеки Lodash
   const _ = require('lodash');

const person1 = {
    "firstName": "John",
    "lastName": "Doe",
    "age": 35
}

const person2 = {
    "firstName": "John",
    "lastName": "Doe",
    "age": 35
}

_.isEqual(person1, person2);
   -Сравнения с помощью библиотеки deep-equal
   const deepEqual = require('deep-equal');

const person1 = {
    "firstName": "John",
    "lastName": "Doe",
    "age": 35
}

const person2 = {
    "firstName": "John",
    "lastName": "Doe",
    "age": "35"
}
deepEqual(person1, person2); // true
   -Node.js: assert.deepStrictEqual(actual, expected, message)
   const assert = require('assert');

const person1 = {
    "firstName": "John",
    "lastName": "Doe",
    "age": 35
}

const person2 = {
    "firstName": "John",
    "lastName": "Doe",
    "age": 35
}

console.log(assert.deepStrictEqual(person1, person2)); //true
 ---------------------------------------------------------------------------------------------------------------------------------------------






7. Какие способы перебора массива вы знаете?
for
for..of
 ---------------------------------------------------------------------------------------------------------------------------------------------



8. Что такое массив?
Массивы в JavaScript представляют собой спископодобные структуры, которые предназначены для хранения упорядоченных данных. 
Можно сказать, что для хранения нескольких строк позволено использовать объекты. Но намного удобнее, 
если каждый элемент имеет свой порядковый номер, который мы можем легко выводить.
 ---------------------------------------------------------------------------------------------------------------------------------------------




9. Как массив определяется в языке JS?
let arr = new Array();
let arr = [];
let fruits = ["Яблоко", "Апельсин", "Слива"];
 ---------------------------------------------------------------------------------------------------------------------------------------------





10. Как получить элемент массива?
let fruits = ["Яблоко", "Апельсин", "Слива"];

alert( fruits[0] );
 ---------------------------------------------------------------------------------------------------------------------------------------------



11. Как добавить/изменить/удалить элемент массива?
fruits[2] = 'Груша';
push()
shift()
pop()
unshift()
splice()
slice()
 ---------------------------------------------------------------------------------------------------------------------------------------------




13. Каким типом данных может быть элемент массива?
Массивы в языке JavaScript являются нетипизированными: элементы массива могут иметь любой тип, причем разные элементы одного и того же массива могут иметь разные типы. Элементы массива могут даже быть объектами или другими массивами, 
что позволяет создавать сложные структуры данных, такие как массивы объектов и массивы массивов.
 ---------------------------------------------------------------------------------------------------------------------------------------------
